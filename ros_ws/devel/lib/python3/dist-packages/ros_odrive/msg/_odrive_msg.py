# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_odrive/odrive_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class odrive_msg(genpy.Message):
  _md5sum = "eb65cc10642e566cfb0f9b5b6bce62b3"
  _type = "ros_odrive/odrive_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Header header    # ROS Message headaer

uint8 target      # Target

float32 vbus      # Bus voltage

int32 error0      # Axis 0 error
int32 state0      # Axis 0 state
float32 vel0      # Axis 0 velocity 
float32 pos0      # Axis 0 encoder position
float32 curr0B    # Axis 0 motor channel B current
float32 curr0C    # Axis 0 motor channel C current
float32 temp0     # Axis 0 invertr temperature

int32 error1      # Axis 1 error
int32 state1      # Axis 1 state
float32 vel1      # Axis 1 velocity 
float32 pos1      # Axis 1 encoder position
float32 curr1B    # Axis 1 motor channel B current
float32 curr1C    # Axis 1 motor channel C current
float32 temp1     # Axis 1 inverter temperature

"""
  __slots__ = ['target','vbus','error0','state0','vel0','pos0','curr0B','curr0C','temp0','error1','state1','vel1','pos1','curr1B','curr1C','temp1']
  _slot_types = ['uint8','float32','int32','int32','float32','float32','float32','float32','float32','int32','int32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target,vbus,error0,state0,vel0,pos0,curr0B,curr0C,temp0,error1,state1,vel1,pos1,curr1B,curr1C,temp1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(odrive_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target is None:
        self.target = 0
      if self.vbus is None:
        self.vbus = 0.
      if self.error0 is None:
        self.error0 = 0
      if self.state0 is None:
        self.state0 = 0
      if self.vel0 is None:
        self.vel0 = 0.
      if self.pos0 is None:
        self.pos0 = 0.
      if self.curr0B is None:
        self.curr0B = 0.
      if self.curr0C is None:
        self.curr0C = 0.
      if self.temp0 is None:
        self.temp0 = 0.
      if self.error1 is None:
        self.error1 = 0
      if self.state1 is None:
        self.state1 = 0
      if self.vel1 is None:
        self.vel1 = 0.
      if self.pos1 is None:
        self.pos1 = 0.
      if self.curr1B is None:
        self.curr1B = 0.
      if self.curr1C is None:
        self.curr1C = 0.
      if self.temp1 is None:
        self.temp1 = 0.
    else:
      self.target = 0
      self.vbus = 0.
      self.error0 = 0
      self.state0 = 0
      self.vel0 = 0.
      self.pos0 = 0.
      self.curr0B = 0.
      self.curr0C = 0.
      self.temp0 = 0.
      self.error1 = 0
      self.state1 = 0
      self.vel1 = 0.
      self.pos1 = 0.
      self.curr1B = 0.
      self.curr1C = 0.
      self.temp1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bf2i5f2i5f().pack(_x.target, _x.vbus, _x.error0, _x.state0, _x.vel0, _x.pos0, _x.curr0B, _x.curr0C, _x.temp0, _x.error1, _x.state1, _x.vel1, _x.pos1, _x.curr1B, _x.curr1C, _x.temp1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 61
      (_x.target, _x.vbus, _x.error0, _x.state0, _x.vel0, _x.pos0, _x.curr0B, _x.curr0C, _x.temp0, _x.error1, _x.state1, _x.vel1, _x.pos1, _x.curr1B, _x.curr1C, _x.temp1,) = _get_struct_Bf2i5f2i5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bf2i5f2i5f().pack(_x.target, _x.vbus, _x.error0, _x.state0, _x.vel0, _x.pos0, _x.curr0B, _x.curr0C, _x.temp0, _x.error1, _x.state1, _x.vel1, _x.pos1, _x.curr1B, _x.curr1C, _x.temp1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 61
      (_x.target, _x.vbus, _x.error0, _x.state0, _x.vel0, _x.pos0, _x.curr0B, _x.curr0C, _x.temp0, _x.error1, _x.state1, _x.vel1, _x.pos1, _x.curr1B, _x.curr1C, _x.temp1,) = _get_struct_Bf2i5f2i5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf2i5f2i5f = None
def _get_struct_Bf2i5f2i5f():
    global _struct_Bf2i5f2i5f
    if _struct_Bf2i5f2i5f is None:
        _struct_Bf2i5f2i5f = struct.Struct("<Bf2i5f2i5f")
    return _struct_Bf2i5f2i5f
